openapi: 3.1.0
info:
  title: Programmable Monitoring Platform API
  description: These sets of APIs describes the principal functionalities of the ROBUST-6G PMP.
  version: 1.0.0

tags:

  - name: ConfigurationManager
    description: API for interacting with the Configuration Manager to request the deployment of tools by the NXW Security Orchestrator.

  - name: ConfigurationManagerThingsboard
    description: API for  interacting with the Configuration Manager to request information about Thingsboard deployed by the NXW Security Orchestrator.

  - name: NearRealtimeDataRetrieval
    description: API for retrieving near real-time data, offering the possibility of retrieving a small piece of data stored in the current communication bus to be consumed by external modules including logs, health metrics, and network traces. 

  - name: DataExporter
    description: API to download reports in various formats (JSON, CSV, XML, YANG) as a file.
  
  - name: HistoricalDataRetrieval
    description: API for retrieving historical data, including logs, health metrics, and network traces.
  
  - name: PodThingsboard
    description: API for interacting with the Pod Thingsboard to deploy the tools needed.

paths:
  /ConfigurationManager/DeployNetworkTool:
    post:
      tags:
        - ConfigurationManager
      summary: "Security Orchestrator - Request to deploy a network tool"
      description: "This endpoint allows the NXW Security Orchestrator to request the deployment of a network tool"
      operationId: "deployNetworkTool"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                podIP:
                  type: string
                  description: "IP address of the pod where the tool will be deployed"
                interface:
                  type: string
                  description: "Network interface on which the tool will sniff traffic"
                toolName:
                  type: string
                  description: "Name of the network tool to deploy"
                sigma_rules:
                  type: array
                  items:
                    type: string
                    description: "Sigma rules generated from the SSLA by the Security Orchestrator."

              required:
                - podIP
                - interface
                - toolName
                - sigma_rules
      responses:
        '200':
          description: OK
  
  /ConfigurationManager/DeployInfrastructureTool: 
    post:
      tags:
        - ConfigurationManager
      summary: "Security Orchestrator - Request to deploy a infrastructure tool"
      description: "This endpoint allows the NXW Security Orchestrator to request the deployment of a infrastructure tool"
      operationId: "deployInfrastructureTool"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                podIP:
                  type: string
                  description: "IP address of the pod where the tool will be deployed"
                toolName:
                  type: string
                  description: "Name of the infrastructure tool to deploy"
                sigma_rules:
                  type: array
                  items:
                    type: string
                    description: "Sigma rules generated from the SSLA by the Security Orchestrator."
              required:
                - podIP
                - toolName
                - sigma_rules
      responses:
        '200':
          description: OK

  /ConfigurationManager/DeployServiceTool: 
    post:
      tags:
        - ConfigurationManager
      summary: "Security Orchestrator - Request to deploy a service tool"
      description: "This endpoint allows the NXW Security Orchestrator to request the deployment of a service tool"
      operationId: "deployServiceTool"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                podIP:
                  type: string
                  description: "IP address of the pod where the tool will be deployed"
                toolName:
                  type: string
                  description: "Name of the service tool to deploy"
                sigma_rules:
                  type: array
                  items:
                    type: string
                    description: "Sigma rules generated from the SSLA by the Security Orchestrator."
              required:
                - podIP
                - toolName
                - sigma_rules
      responses:
        '200':
          description: OK



  /ConfigurationManager/DeploySecurityTool: 
    post:
      tags:
        - ConfigurationManager
      summary: "Security Orchestrator - Request to deploy a security tool"
      description: "This endpoint allows the NXW Security Orchestrator to request the deployment of a security tool"
      operationId: "deploySecurityTool"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                podIP:
                  type: string
                  description: "IP address of the pod where the tool will be deployed"
                toolName:
                  type: string
                  description: "Name of the service tool to deploy"
                sigma_rules:
                  type: array
                  items:
                    type: string
                    description: "Sigma rules generated from the SSLA by the Security Orchestrator."
              required:
                - podIP
                - toolName
                - sigma_rules

  /ConfigurationManager/getConfigurationOptions:
    get:
      tags:
        - ConfigurationManager
      summary: "Security Orchestrator - Requests to know the different configurations that a tool can manage"
      description: "This endpoint allows the NXW Security Orchestrator to know what options it has for configuring a tool"
      operationId: "getConfigurationOptions"
      parameters:
        - name: toolName
          in: query
          description: "Name of the tool for which the orchestrator wants to know the options"
          required: true
          schema:
            type: string
      responses:
        '200':
          description: "Options of the tool"
          content:
            application/json:
              schema:
                type: object
                properties:
                  configurationOptions:
                    type: array
                    description: "List of options. Can be one or more options"
                    items:
                      type: string
                    example:
                      - "memory"
                      - "disk"
                      - "cpu"
                      - "sensors"
                      - "internet speed"

  /ConfigurationManager/updateConfiguration:
    put:
      tags:
        - ConfigurationManager
      summary: "Security Orchestrator updates the current configuration."
      description: "This endpoint allows the Security Orchestrator to update the current deployed configuration."
      operationId: "soUpdateConfiguration"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                podIP:
                  type: string
                  description: "IP address of the pod where the tool is already deployed"
                toolName:
                  type: string
                  description: "Name of the service tool to deployed"
                tool_type:
                  type: string
                  description: "Type of the service tool deployed"
                  example:
                   - "network"
                   - "infrastructure"
                   - "service"
                   - "security"
                sigma_rules:
                  type: array
                  items:
                    type: string
                    description: "New sigma rules generated from the SSLA by the Security Orchestrator."
              required:
                - podIP
                - toolName
                - toolName
                - sigma_rules

      responses:
        "200":
          description: "Proceeding to update the configuration"
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: integer
                    example: 200
                    description: "Response code indicating success"
                  message:
                    type: string
                    example: "Proceeding to update the configuration"
                    description: "Response message confirming the success of the request."
 
  
   
  /NearRealtimeDataRetrieval/RawDataJSON:
    get:
      tags:
        - NearRealtimeDataRetrieval
      summary: "Request near real-time data based on selected types."
      description: "This endpoint retrieves specific types of near real-time data based on the provided query parameters. You can request logs, health metrics, and network traces separately. In addition, you can specify the userID to extract only the information from this user."
      operationId: "rawDataJSON"
      parameters:
        - name: userID
          in: query
          description: "The id of the user."
          required: false
          schema:
            type: string
        - name: logs
          in: query
          description: "Include logs in the response."
          required: false
          schema:
            type: boolean
            default: false
        - name: healthMetrics
          in: query
          description: "Include health metrics in the response."
          required: false
          schema:
            type: boolean
            default: false
        - name: networkTraces
          in: query
          description: "Include network traces in the response."
          required: false
          schema:
            type: boolean
            default: false
      responses:
        "200":
          description: "JSON file containing selected data"
          content:
            application/json:
              schema:
                type: string
                format: binary
              example: "rawData.json"
          headers:
            Content-Disposition:
              description: "The header indicates that the response is a downloadable JSON file."
              schema:
                type: string
                example: "attachment; filename=rawData.json"
  /NearRealtimeDataRetrieval/RawDataCSV:
    get:
      tags:
        - NearRealtimeDataRetrieval
      summary: "Request near real-time data based on selected types."
      description: "This endpoint retrieves specific types of near real-time data based on the provided query parameters. You can request logs, health metrics, and network traces separately. In addition, you can specify the userID to extract only the information from this user."
      operationId: "rawDataCSV"
      parameters:
        - name: userID
          in: query
          description: "The id of the user."
          required: false
          schema:
            type: string
        - name: logs
          in: query
          description: "Include logs in the response."
          required: false
          schema:
            type: boolean
            default: false
        - name: healthMetrics
          in: query
          description: "Include health metrics in the response."
          required: false
          schema:
            type: boolean
            default: false
        - name: networkTraces
          in: query
          description: "Include network traces in the response."
          required: false
          schema:
            type: boolean
            default: false
      responses:
        "200":
          description: "CSV file containing selected data"
          content:
            application/csv:
              schema:
                type: string
                format: binary
              example: "rawData.csv"
          headers:
            Content-Disposition:
              description: "The header indicates that the response is a downloadable CSV file."
              schema:
                type: string
                example: "attachment; filename=rawData.csv"
  /NearRealtimeDataRetrieval/RawDataXML:
    get:
      tags:
        - NearRealtimeDataRetrieval
      summary: "Request near real-time data based on selected types."
      description: "This endpoint retrieves specific types of near real-time data based on the provided query parameters. You can request logs, health metrics, and network traces separately. In addition, you can specify the userID to extract only the information from this user."
      operationId: "rawDataXML"
      parameters:
        - name: userID
          in: query
          description: "The id of the user."
          required: false
          schema:
            type: string
        - name: logs
          in: query
          description: "Include logs in the response."
          required: false
          schema:
            type: boolean
            default: false
        - name: healthMetrics
          in: query
          description: "Include health metrics in the response."
          required: false
          schema:
            type: boolean
            default: false
        - name: networkTraces
          in: query
          description: "Include network traces in the response."
          required: false
          schema:
            type: boolean
            default: false
      responses:
        "200":
          description: "XML file containing selected data"
          content:
            application/xml:
              schema:
                type: string
                format: binary
              example: "rawData.xml"
          headers:
            Content-Disposition:
              description: "The header indicates that the response is a downloadable XML file."
              schema:
                type: string
                example: "attachment; filename=rawData.xml"
  /NearRealtimeDataRetrieval/RawDataYANG:
    get:
      tags:
        - NearRealtimeDataRetrieval
      summary: "Request near real-time data based on selected types."
      description: "This endpoint retrieves specific types of near real-time data based on the provided query parameters. You can request logs, health metrics, and network traces separately. In addition, you can specify the userID to extract only the information from this user."
      operationId: "rawDataYANG"
      parameters:
        - name: userID
          in: query
          description: "The id of the user."
          required: false
          schema:
            type: string
        - name: logs
          in: query
          description: "Include logs in the response."
          required: false
          schema:
            type: boolean
            default: false
        - name: healthMetrics
          in: query
          description: "Include health metrics in the response."
          required: false
          schema:
            type: boolean
            default: false
        - name: networkTraces
          in: query
          description: "Include network traces in the response."
          required: false
          schema:
            type: boolean
            default: false
      responses:
        "200":
          description: "YANG file containing selected data"
          content:
            application/yang:
              schema:
                type: string
                format: binary
              example: "rawData.yang"
          headers:
            Content-Disposition:
              description: "The header indicates that the response is a downloadable YANG file."
              schema:
                type: string
                example: "attachment; filename=rawData.yang"

  /DataExporter/DownloadReportJSON:
    get:
      tags:
        - DataExporter
      summary: "Download report with logs, health metrics or network traces in JSON format"
      description: "This endpoint allows downloading a JSON file. You can request logs, health metrics, and network traces separately. In addition, you can specify the userID to extract only the information from this user."
      operationId: "downloadReportJSON"
      parameters:
        - name: userID
          in: query
          description: "The id of the user."
          required: false
          schema:
            type: string
        - name: logs
          in: query
          description: "Include logs in the response."
          required: false
          schema:
            type: boolean
            default: false
        - name: healthMetrics
          in: query
          description: "Include health metrics in the response."
          required: false
          schema:
            type: boolean
            default: false
        - name: networkTraces
          in: query
          description: "Include network traces in the response."
          required: false
          schema:
            type: boolean
            default: false
      responses:
        "200":
          description: "JSON file containing selected data"
          content:
            application/json:
              schema:
                type: string
                format: binary
              example: "report.json"
          headers:
            Content-Disposition:
              description: "The header indicates that the response is a downloadable JSON file."
              schema:
                type: string
                example: "attachment; filename=report.json"
  /DataExporter/DownloadReportCSV:
    get:
      tags:
        - DataExporter
      summary: "Download report with logs, health metrics or network traces in CSV format"
      description: "This endpoint allows downloading a CSV file. You can request logs, health metrics, and network traces separately. In addition, you can specify the userID to extract only the information from this user."
      operationId: "downloadReportCSV"
      parameters:
        - name: userID
          in: query
          description: "The id of the user."
          required: false
          schema:
            type: string
        - name: logs
          in: query
          description: "Include logs in the response."
          required: false
          schema:
            type: boolean
            default: false
        - name: healthMetrics
          in: query
          description: "Include health metrics in the response."
          required: false
          schema:
            type: boolean
            default: false
        - name: networkTraces
          in: query
          description: "Include network traces in the response."
          required: false
          schema:
            type: boolean
            default: false
      responses:
        "200":
          description: "CSV file containing selected data"
          content:
            application/csv:
              schema:
                type: string
                format: binary
              example: "report.csv"
          headers:
            Content-Disposition:
              description: "The header indicates that the response is a downloadable CSV file."
              schema:
                type: string
                example: "attachment; filename=report.csv"
  /DataExporter/DownloadReportXML:
    get:
      tags:
        - DataExporter
      summary: "Download report with logs, health metrics or network traces in XML format"
      description: "This endpoint allows downloading a XML file. You can request logs, health metrics, and network traces separately. In addition, you can specify the userID to extract only the information from this user."
      operationId: "downloadReportXML"
      parameters:
        - name: userID
          in: query
          description: "The id of the user."
          required: false
          schema:
            type: string
        - name: logs
          in: query
          description: "Include logs in the response."
          required: false
          schema:
            type: boolean
            default: false
        - name: healthMetrics
          in: query
          description: "Include health metrics in the response."
          required: false
          schema:
            type: boolean
            default: false
        - name: networkTraces
          in: query
          description: "Include network traces in the response."
          required: false
          schema:
            type: boolean
            default: false
      responses:
        "200":
          description: "XML file containing selected data"
          content:
            application/xml:
              schema:
                type: string
                format: binary
              example: "report.xml"
          headers:
            Content-Disposition:
              description: "The header indicates that the response is a downloadable XML file."
              schema:
                type: string
                example: "attachment; filename=report.xml"
  /DataExporter/DownloadReportYANG:
    get:
      tags:
        - DataExporter
      summary: "Download report with logs, health metrics or network traces in YANG format"
      description: "This endpoint allows downloading a YANG file. You can request logs, health metrics, and network traces separately. In addition, you can specify the userID to extract only the information from this user."
      operationId: "downloadReportYANG"
      parameters:
        - name: userID
          in: query
          description: "The id of the user."
          required: false
          schema:
            type: string
        - name: logs
          in: query
          description: "Include logs in the response."
          required: false
          schema:
            type: boolean
            default: false
        - name: healthMetrics
          in: query
          description: "Include health metrics in the response."
          required: false
          schema:
            type: boolean
            default: false
        - name: networkTraces
          in: query
          description: "Include network traces in the response."
          required: false
          schema:
            type: boolean
            default: false
      responses:
        "200":
          description: "YANG file containing selected data"
          content:
            application/yang:
              schema:
                type: string
                format: binary
              example: "report.yang"
          headers:
            Content-Disposition:
              description: "The header indicates that the response is a downloadable YANG file."
              schema:
                type: string
                example: "attachment; filename=report.yang"
  
  /HistoricalDataRetrieval/RequestDataJSON:
    get:
      tags:
        - HistoricalDataRetrieval
      summary: "Request historical data based on selected types and time range in JSON format."
      description: "This endpoint retrieves specific types of historical data based on the provided query parameters. You can request logs, health metrics, and network traces separately. In addition, you can specify the userID to extract only the information from this user."
      operationId: "requestHistoricalDataJSON"
      parameters:
        - name: userID
          in: query
          description: "The id of the user."
          required: false
          schema:
            type: string
        - name: logs
          in: query
          description: "Include logs in the response."
          required: false
          schema:
            type: boolean
            default: false
        - name: healthMetrics
          in: query
          description: "Include health metrics in the response."
          required: false
          schema:
            type: boolean
            default: false
        - name: networkTraces
          in: query
          description: "Include network traces in the response."
          required: false
          schema:
            type: boolean
            default: false
        - name: startTime
          in: query
          description: "The start time of the data."
          required: false
          schema:
            type: string
            format: date-time
        - name: endTime
          in: query
          description: "The end time of the data."
          required: false
          schema:
            type: string
            format: date-time
      responses:
        "200":
          description: "JSON file containing selected data"
          content:
            application/json:
              schema:
                type: string
                format: binary
              example: "historicalData.json"
          headers:
            Content-Disposition:
              description: "The header indicates that the response is a downloadable JSON file."
              schema:
                type: string
                example: "attachment; filename=historicalData.json"
  /HistoricalDataRetrieval/RequestDataCSV:
    get:
      tags:
        - HistoricalDataRetrieval
      summary: "Request historical data based on selected types and time range in CSV format."
      description: "This endpoint retrieves specific types of historical data based on the provided query parameters. You can request logs, health metrics, and network traces separately. In addition, you can specify the userID to extract only the information from this user."
      operationId: "requestHistoricalDataCSV"
      parameters:
        - name: userID
          in: query
          description: "The id of the user."
          required: false
          schema:
            type: string
        - name: logs
          in: query
          description: "Include logs in the response."
          required: false
          schema:
            type: boolean
            default: false
        - name: healthMetrics
          in: query
          description: "Include health metrics in the response."
          required: false
          schema:
            type: boolean
            default: false
        - name: networkTraces
          in: query
          description: "Include network traces in the response."
          required: false
          schema:
            type: boolean
            default: false
        - name: startTime
          in: query
          description: "The start time of the data."
          required: false
          schema:
            type: string
            format: date-time
        - name: endTime
          in: query
          description: "The end time of the data."
          required: false
          schema:
            type: string
            format: date-time
      responses:
        "200":
          description: "CSV file containing selected data"
          content:
            application/csv:
              schema:
                type: string
                format: binary
              example: "historicalData.csv"
          headers:
            Content-Disposition:
              description: "The header indicates that the response is a downloadable CSV file."
              schema:
                type: string
                example: "attachment; filename=historicalData.csv"
  /HistoricalDataRetrieval/RequestDataXML:
    get:
      tags:
        - HistoricalDataRetrieval
      summary: "Request historical data based on selected types and time range in XML format."
      description: "This endpoint retrieves specific types of historical data based on the provided query parameters. You can request logs, health metrics, and network traces separately. In addition, you can specify the userID to extract only the information from this user."
      operationId: "requestHistoricalDataXML"
      parameters:
        - name: userID
          in: query
          description: "The id of the user."
          required: false
          schema:
            type: string
        - name: logs
          in: query
          description: "Include logs in the response."
          required: false
          schema:
            type: boolean
            default: false
        - name: healthMetrics
          in: query
          description: "Include health metrics in the response."
          required: false
          schema:
            type: boolean
            default: false
        - name: networkTraces
          in: query
          description: "Include network traces in the response."
          required: false
          schema:
            type: boolean
            default: false
        - name: startTime
          in: query
          description: "The start time of the data."
          required: false
          schema:
            type: string
            format: date-time
        - name: endTime
          in: query
          description: "The end time of the data."
          required: false
          schema:
            type: string
            format: date-time
      responses:
        "200":
          description: "XML file containing selected data"
          content:
            application/xml:
              schema:
                type: string
                format: binary
              example: "historicalData.xml"
          headers:
            Content-Disposition:
              description: "The header indicates that the response is a downloadable XML file."
              schema:
                type: string
                example: "attachment; filename=historicalData.xml"
  /HistoricalDataRetrieval/RequestDataYANG:
    get:
      tags:
        - HistoricalDataRetrieval
      summary: "Request historical data based on selected types and time range in YANG format."
      description: "This endpoint retrieves specific types of historical data based on the provided query parameters. You can request logs, health metrics, and network traces separately. In addition, you can specify the userID to extract only the information from this user."
      operationId: "requestHistoricalDataYANG"
      parameters:
        - name: userID
          in: query
          description: "The id of the user."
          required: false
          schema:
            type: string
        - name: logs
          in: query
          description: "Include logs in the response."
          required: false
          schema:
            type: boolean
            default: false
        - name: healthMetrics
          in: query
          description: "Include health metrics in the response."
          required: false
          schema:
            type: boolean
            default: false
        - name: networkTraces
          in: query
          description: "Include network traces in the response."
          required: false
          schema:
            type: boolean
            default: false
        - name: startTime
          in: query
          description: "The start time of the data."
          required: false
          schema:
            type: string
            format: date-time
        - name: endTime
          in: query
          description: "The end time of the data."
          required: false
          schema:
            type: string
            format: date-time
      responses:
        "200":
          description: "YANG file containing selected data"
          content:
            application/yang:
              schema:
                type: string
                format: binary
              example: "historicalData.yang"
          headers:
            Content-Disposition:
              description: "The header indicates that the response is a downloadable YANG file."
              schema:
                type: string
                example: "attachment; filename=historicalData.yang"



                      
  /ConfigurationManagerThingsboard/collectDataFromThingsboard:
    post:
      tags:
        - ConfigurationManagerThingsboard
      summary: "Security Orchestrator - Security Orchestrator request for PMP to trigger Thingsboard data collection."
      description: "This endpoint allows the NXW Security Orchestrator to request the PMP to trigger data collection from Thingsboard."
      operationId: "collectDataFromThingsboard"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                thingsboardsIP:
                  type: string
                  description: "IP address of the Thingsboard instance from which data will be collected"
                thingsboardPort:
                  type: integer
                  description: "Port number of the Thingsboard instance"
                entityId:
                  type: string
                  description: "A string value representing the entity id. For example, '784f394c-42b6-435a-983c-b7beff2784f9'."
                entityType:
                  type: string
                  description: "A string value representing the entity type"
                  default: "DEVICE"
                timestampInit:
                  type: string
                  format: date-time
                  description: "Timestamp of start of the information generated by Thingsboard"
                timestampEnd:
                  type: string
                  format: date-time
                  description: "Timestamp of end of the information generated by Thingsboard"

              required:
                - thingsboardsIP
                - thingsboardPort
                - entityId
                - entityType
      responses:
        '200':
          description: OK

  /PodThingsboard/deployTool:
    post:
      tags:
        - PodThingsboard
      summary: "PMP - Request to deploy a tool on the Thingsboard pod"
      description: "This endpoint allows the PMP to request the deployment of a tool on the Thingsboard pod."
      operationId: "deployTool"
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                containerFiles:
                  type: array
                  items:
                    type: string
                    format: binary
                  description: "Files containing the tool to be deployed on the Thingsboard pod"
                communicationBusSocket:
                  type: string
                  description: "Communication Bus Socket implemented in the PMP to send the information from the tool deployed in the Thingsboard pod to the PMP."
              required:
                - containerFiles
                - communicationBusSocket   
      responses:
        '200':
          description: OK

  /PodThingsboard/getCurrentToolsDeployed:
    get:
      tags:
        - PodThingsboard
      summary: "PMP - Request to know which tools are currently deployed"
      description: "This endpoint allows the PMP to request the names of the tools deployed in the Thingsboard pod"
      operationId: "getCurrentToolsDeployed"
      responses:
        "200":
          description: "The GetConfiguration request has been processed successfully"
          content:
            application/json:
              schema:
                type: object
                properties:
                  toolsDeployed:
                    type: array
                    description: "The tools deployed."
                    items:
                      type: string
                    example:
                      - "Fluentd"
                      - "Falco"
                      - "Telegraf"
                      - "Tshark"
                      - "Filebeat"

  /PodThingsboard/setCurrentConfiguration:
    put:
      tags:
        - PodThingsboard
      summary: "PMP - Request to update the current configuration of a tool deployed in Thingsboard pod"
      description: "This endpoint allows the PMP to update the configuration of a tool on the Thingsboard pod."
      operationId: "setCurrentConfiguration"
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                containerFiles:
                  type: array
                  items:
                    type: string
                    format: binary
                  description: "Files containing the tool to be deployed on the Thingsboard pod"
                toolName:
                  type: string
                  description: "Name of the tool to be update"
              required:
                - containerFiles
                - toolName
      responses:
        '200':
          description: OK  

components:
  schemas:
    DataSource:
      type: object
      properties:
        toolName:
          type: string
          description: "The name of the tool."
        objetives:
          type: array
          description: "A objetives list of the data source."
          items:
            type: string
            description: "Each objetive."
        networkSegment:
          type: array
          description: "A list of network segments of the data source."
          items:
            type: string
            description: "Each network segment."

    Threshold:
      type: object
      properties:
        toolName:
          type: string
          description: "The name of the tool."
        policy:
          type: array
          description: "A list of policies for the threshold."
          items:
            $ref: "#/components/schemas/Policy"

    Policy:
      type: object
      properties:
        id:
          type: string
          description: "The id of the policy."
        policyType:
          type: string
          description: "The type of the policy."
          example: 
            - "Drop"
            - "Blocking"
            - "Blacklist"
            - "Whitelist"
        policyAction:
          type: string
          description: "The objetive of the policy."
          example:
            - "Block all traffic from a specific IP address."
            - "Drop all traffic from a specific Port."
            - "Allow all traffic from a specific NetworkSegment."
        policyObjetive:
          type: array
          items: 
            type: string
            description: "The objetive of the policy."
            example:
                - "IP"
                - "Port"
                - "Protocol"
                - "NetworkSegment"

    Tool:
      type: object
      properties:
        id:
          type: string
          description: "The id of the tool."
        name:
          type: string
          description: "The name of the tool."
        version:
          type: string
          description: "The version of the tool."
        toolType:
          type: string
        configuration:
          type: object
          description: "The configuration details for the tool."
          properties:
            configFile:
              type: string
              format: binary
              description: "The JSON configuration file for the tool."