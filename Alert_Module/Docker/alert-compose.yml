# sudo docker compose up -d
# sudo docker exec -it IDCONTAINER bash
---
services:
  kafka:
    image: apache/kafka:3.9.0
    container_name: kafka
    healthcheck:
      test: ["CMD", "nc", "-z", "kafka", "29092"] #bash -lc 'kafka-topics.sh --bootstrap-server localhost:29092 --list >/dev/null 2>&1'
      interval: 5s
      retries: 15
      start_period: 10s
      timeout: 3s
    environment:
      TZ: "UTC"
      KAFKA_PROCESS_ROLES: broker,controller
      KAFKA_NODE_ID: 1
      KAFKA_CONTROLLER_QUORUM_VOTERS: 1@kafka:9093
      # BROKER for internal connections and EXTERNAL for external connection
      # kafka:29092 -> same Docker network
      # host.docker.internal:9092 -> same host, but other network
      # kafka-node1.lan:9094 -> other host
      KAFKA_LISTENERS: >
        BROKER://0.0.0.0:29092,
        EXTERNAL_DOCKER://0.0.0.0:9092,
        EXTERNAL_LAN://0.0.0.0:9094,
        CONTROLLER://:9093
      KAFKA_ADVERTISED_LISTENERS: >
        BROKER://kafka:29092,
        EXTERNAL_DOCKER://host.docker.internal:9092,
        EXTERNAL_LAN://kafka-node1.lan:9094,
        CONTROLLER://kafka:9093
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: >
        BROKER:PLAINTEXT,
        EXTERNAL_DOCKER:PLAINTEXT,
        EXTERNAL_LAN:PLAINTEXT,
        CONTROLLER:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: BROKER
      KAFKA_CONTROLLER_LISTENER_NAMES: CONTROLLER
      ALLOW_PLAINTEXT_LISTENER: "yes"
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: "true"
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: "1"
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: "1"
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: "1"
      KAFKA_DEFAULT_REPLICATION_FACTOR: "1"
      KAFKA_NUM_PARTITIONS: "1"

  # === Retención por defecto (APLICA POR PARTICIÓN - NUM_PARTITIONS = 1) ===
      KAFKA_LOG_RETENTION_MS: "86400000"          # 1 día
      KAFKA_LOG_RETENTION_BYTES: "1073741824"     # 1 GiB (1 * 1024^3)
      KAFKA_LOG_CLEANUP_POLICY: "delete"          # borra (no solo compacta)
      KAFKA_LOG_SEGMENT_BYTES: "268435456"        # 256 MiB: rota más a menudo
      KAFKA_LOG_ROLL_MS: "3600000"                # rota por tiempo si hay poco tráfico

    ports:
      - "29092:29092"
      - "9092:9092"
      - "9094:9094"

  filebeat:
    image: elastic/filebeat:8.16.2
    container_name: filebeat
    environment:
      - TZ=UTC
    depends_on:
      - kafka
    volumes:
      - /home/user/Escritorio/ROBUST-6G_PMP/Communication_Bus/Configuration_Files/filebeat.yml:/usr/share/filebeat/filebeat.yml:ro #FIXME cambiar la ruta
      - ${PFD}/Results/tshark/traces:/tshark/traces:ro
  
    restart: unless-stopped
    user: root

  tshark:
    image: tshark_robust6g:latest
    container_name: tshark
    restart: unless-stopped
    depends_on:
      - kafka
    environment:
      - TZ=UTC
    network_mode: "${NETWORK_MODE}" # Allows container to see host interfaces
    cap_add:
      # https://man7.org/linux/man-pages/man7/capabilities.7.html
      - NET_ADMIN # Modify network interfaces and adjust iptables rules
      - NET_RAW   # Capture packets without restrictions
    volumes:
      - ${PFD}/Results/tshark/traces:/data/traces # Tshark logs accessible to Filebeat
      - /sys/class/net:/sys/class/net    # Allows script to see host interfaces
      
  alert_module:
    image: alert_module_robust6g:latest
    container_name: alert_module
    restart: unless-stopped
    #depends_on:
    #  kafka:
    #    condition: service_healthy
    # #FIXME CAMBIAR Y PROBAR LA NUEVA FORMA DE LLAMAR A LOS LISTENERS -> ADEMAS CAMBIAR KAFKA_IO Y alert_module_run
    environment:
      - TZ=UTC
      - KAFKA_BOOTSTRAP=kafka:29092            # same Docker network 
    # If host.docker.internal is used in Linux:
    extra_hosts:
      - "host.docker.internal:host-gateway"
    volumes: #local_folder : #container_folder
      - ${PFD}/Results/Alerts:/home/Alert_Module/Alerts
      #- /sys/class/net:/sys/class/net    # Allows script to see host interfaces -> quitarlo seguramente porque no va a ser necesario para snort solo
